
ProjektWolne.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001624  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017ec  080017ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080017ec  080017ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017ec  080017ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017ec  080017ec  000117ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017f0  080017f0  000117f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001800  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001800  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049ad  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ff6  00000000  00000000  000249e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000598  00000000  00000000  000259e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000500  00000000  00000000  00025f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024191  00000000  00000000  00026478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005851  00000000  00000000  0004a609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de099  00000000  00000000  0004fe5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012def3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001488  00000000  00000000  0012df44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001794 	.word	0x08001794

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001794 	.word	0x08001794

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f92f 	bl	800042e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f826 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f86a 	bl	80002ac <MX_GPIO_Init>
  while (1)
  {



HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 80001d8:	2120      	movs	r1, #32
 80001da:	4810      	ldr	r0, [pc, #64]	; (800021c <main+0x54>)
 80001dc:	f000 fc68 	bl	8000ab0 <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 80001e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e4:	f000 f998 	bl	8000518 <HAL_Delay>
HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 80001e8:	2120      	movs	r1, #32
 80001ea:	480c      	ldr	r0, [pc, #48]	; (800021c <main+0x54>)
 80001ec:	f000 fc60 	bl	8000ab0 <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 80001f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f4:	f000 f990 	bl	8000518 <HAL_Delay>

HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80001f8:	2140      	movs	r1, #64	; 0x40
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <main+0x54>)
 80001fc:	f000 fc58 	bl	8000ab0 <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 8000200:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000204:	f000 f988 	bl	8000518 <HAL_Delay>
HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000208:	2140      	movs	r1, #64	; 0x40
 800020a:	4804      	ldr	r0, [pc, #16]	; (800021c <main+0x54>)
 800020c:	f000 fc50 	bl	8000ab0 <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 8000210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000214:	f000 f980 	bl	8000518 <HAL_Delay>
HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000218:	e7de      	b.n	80001d8 <main+0x10>
 800021a:	bf00      	nop
 800021c:	48000400 	.word	0x48000400

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b096      	sub	sp, #88	; 0x58
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	2244      	movs	r2, #68	; 0x44
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f001 faa8 	bl	8001784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	463b      	mov	r3, r7
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000242:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000246:	f000 fc5b 	bl	8000b00 <HAL_PWREx_ControlVoltageScaling>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000250:	f000 f85e 	bl	8000310 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000254:	2310      	movs	r3, #16
 8000256:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800025c:	2300      	movs	r3, #0
 800025e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000260:	2360      	movs	r3, #96	; 0x60
 8000262:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000264:	2300      	movs	r3, #0
 8000266:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	4618      	mov	r0, r3
 800026e:	f000 fc9d 	bl	8000bac <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000278:	f000 f84a 	bl	8000310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000280:	2300      	movs	r3, #0
 8000282:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000290:	463b      	mov	r3, r7
 8000292:	2100      	movs	r1, #0
 8000294:	4618      	mov	r0, r3
 8000296:	f001 f865 	bl	8001364 <HAL_RCC_ClockConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002a0:	f000 f836 	bl	8000310 <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3758      	adds	r7, #88	; 0x58
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_GPIO_Init+0x5c>)
 80002c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c4:	4a10      	ldr	r2, [pc, #64]	; (8000308 <MX_GPIO_Init+0x5c>)
 80002c6:	f043 0302 	orr.w	r3, r3, #2
 80002ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_GPIO_Init+0x5c>)
 80002ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d0:	f003 0302 	and.w	r3, r3, #2
 80002d4:	603b      	str	r3, [r7, #0]
 80002d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD6_Pin|LD7_Pin|LD8_Pin|LD9_Pin
 80002d8:	2200      	movs	r2, #0
 80002da:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <MX_GPIO_Init+0x60>)
 80002e0:	f000 fbce 	bl	8000a80 <HAL_GPIO_WritePin>
                          |LD3_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD6_Pin LD7_Pin LD8_Pin LD9_Pin
                           LD10_Pin LD11_Pin LD1_Pin LD2_Pin
                           LD3_Pin LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = LD6_Pin|LD7_Pin|LD8_Pin|LD9_Pin
 80002e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80002e8:	607b      	str	r3, [r7, #4]
                          |LD10_Pin|LD11_Pin|LD1_Pin|LD2_Pin
                          |LD3_Pin|LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ea:	2301      	movs	r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4619      	mov	r1, r3
 80002fa:	4804      	ldr	r0, [pc, #16]	; (800030c <MX_GPIO_Init+0x60>)
 80002fc:	f000 fa16 	bl	800072c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000300:	bf00      	nop
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40021000 	.word	0x40021000
 800030c:	48000400 	.word	0x48000400

08000310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000314:	b672      	cpsid	i
}
 8000316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000318:	e7fe      	b.n	8000318 <Error_Handler+0x8>
	...

0800031c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <HAL_MspInit+0x44>)
 8000324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000326:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <HAL_MspInit+0x44>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6613      	str	r3, [r2, #96]	; 0x60
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <HAL_MspInit+0x44>)
 8000330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <HAL_MspInit+0x44>)
 800033c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <HAL_MspInit+0x44>)
 8000340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000344:	6593      	str	r3, [r2, #88]	; 0x58
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <HAL_MspInit+0x44>)
 8000348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800034a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000

08000364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <NMI_Handler+0x4>

0800036a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800036e:	e7fe      	b.n	800036e <HardFault_Handler+0x4>

08000370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000374:	e7fe      	b.n	8000374 <MemManage_Handler+0x4>

08000376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037a:	e7fe      	b.n	800037a <BusFault_Handler+0x4>

0800037c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <UsageFault_Handler+0x4>

08000382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr

0800039e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b0:	f000 f892 	bl	80004d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SystemInit+0x20>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c2:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <SystemInit+0x20>)
 80003c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000ed00 	.word	0xe000ed00

080003dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000414 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003e0:	f7ff ffea 	bl	80003b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	; (800041c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <LoopForever+0xe>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	; (8000428 <LoopForever+0x16>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800040a:	f001 f997 	bl	800173c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800040e:	f7ff fedb 	bl	80001c8 <main>

08000412 <LoopForever>:

LoopForever:
    b LoopForever
 8000412:	e7fe      	b.n	8000412 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000414:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000420:	080017f4 	.word	0x080017f4
  ldr r2, =_sbss
 8000424:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000428:	2000002c 	.word	0x2000002c

0800042c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC1_2_IRQHandler>

0800042e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b082      	sub	sp, #8
 8000432:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000434:	2300      	movs	r3, #0
 8000436:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000438:	2003      	movs	r0, #3
 800043a:	f000 f943 	bl	80006c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800043e:	200f      	movs	r0, #15
 8000440:	f000 f80e 	bl	8000460 <HAL_InitTick>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d002      	beq.n	8000450 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800044a:	2301      	movs	r3, #1
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	e001      	b.n	8000454 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000450:	f7ff ff64 	bl	800031c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000454:	79fb      	ldrb	r3, [r7, #7]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000468:	2300      	movs	r3, #0
 800046a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800046c:	4b17      	ldr	r3, [pc, #92]	; (80004cc <HAL_InitTick+0x6c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d023      	beq.n	80004bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <HAL_InitTick+0x70>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <HAL_InitTick+0x6c>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4619      	mov	r1, r3
 800047e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000482:	fbb3 f3f1 	udiv	r3, r3, r1
 8000486:	fbb2 f3f3 	udiv	r3, r2, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f000 f941 	bl	8000712 <HAL_SYSTICK_Config>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d10f      	bne.n	80004b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2b0f      	cmp	r3, #15
 800049a:	d809      	bhi.n	80004b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800049c:	2200      	movs	r2, #0
 800049e:	6879      	ldr	r1, [r7, #4]
 80004a0:	f04f 30ff 	mov.w	r0, #4294967295
 80004a4:	f000 f919 	bl	80006da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004a8:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <HAL_InitTick+0x74>)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6013      	str	r3, [r2, #0]
 80004ae:	e007      	b.n	80004c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80004b0:	2301      	movs	r3, #1
 80004b2:	73fb      	strb	r3, [r7, #15]
 80004b4:	e004      	b.n	80004c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004b6:	2301      	movs	r3, #1
 80004b8:	73fb      	strb	r3, [r7, #15]
 80004ba:	e001      	b.n	80004c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004bc:	2301      	movs	r3, #1
 80004be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3710      	adds	r7, #16
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000008 	.word	0x20000008
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20000004 	.word	0x20000004

080004d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_IncTick+0x20>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_IncTick+0x24>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <HAL_IncTick+0x24>)
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	20000008 	.word	0x20000008
 80004fc:	20000028 	.word	0x20000028

08000500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return uwTick;
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <HAL_GetTick+0x14>)
 8000506:	681b      	ldr	r3, [r3, #0]
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000028 	.word	0x20000028

08000518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000520:	f7ff ffee 	bl	8000500 <HAL_GetTick>
 8000524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000530:	d005      	beq.n	800053e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_Delay+0x44>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	461a      	mov	r2, r3
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4413      	add	r3, r2
 800053c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800053e:	bf00      	nop
 8000540:	f7ff ffde 	bl	8000500 <HAL_GetTick>
 8000544:	4602      	mov	r2, r0
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	429a      	cmp	r2, r3
 800054e:	d8f7      	bhi.n	8000540 <HAL_Delay+0x28>
  {
  }
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000008 	.word	0x20000008

08000560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f003 0307 	and.w	r3, r3, #7
 800056e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800057c:	4013      	ands	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	60d3      	str	r3, [r2, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	f003 0307 	and.w	r3, r3, #7
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	db0a      	blt.n	80005ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	490c      	ldr	r1, [pc, #48]	; (8000610 <__NVIC_SetPriority+0x4c>)
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	0112      	lsls	r2, r2, #4
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	440b      	add	r3, r1
 80005e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005ec:	e00a      	b.n	8000604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4908      	ldr	r1, [pc, #32]	; (8000614 <__NVIC_SetPriority+0x50>)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f003 030f 	and.w	r3, r3, #15
 80005fa:	3b04      	subs	r3, #4
 80005fc:	0112      	lsls	r2, r2, #4
 80005fe:	b2d2      	uxtb	r2, r2
 8000600:	440b      	add	r3, r1
 8000602:	761a      	strb	r2, [r3, #24]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000e100 	.word	0xe000e100
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000618:	b480      	push	{r7}
 800061a:	b089      	sub	sp, #36	; 0x24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	f1c3 0307 	rsb	r3, r3, #7
 8000632:	2b04      	cmp	r3, #4
 8000634:	bf28      	it	cs
 8000636:	2304      	movcs	r3, #4
 8000638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3304      	adds	r3, #4
 800063e:	2b06      	cmp	r3, #6
 8000640:	d902      	bls.n	8000648 <NVIC_EncodePriority+0x30>
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	3b03      	subs	r3, #3
 8000646:	e000      	b.n	800064a <NVIC_EncodePriority+0x32>
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	f04f 32ff 	mov.w	r2, #4294967295
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	43da      	mvns	r2, r3
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	401a      	ands	r2, r3
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000660:	f04f 31ff 	mov.w	r1, #4294967295
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43d9      	mvns	r1, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000670:	4313      	orrs	r3, r2
         );
}
 8000672:	4618      	mov	r0, r3
 8000674:	3724      	adds	r7, #36	; 0x24
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3b01      	subs	r3, #1
 800068c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000690:	d301      	bcc.n	8000696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000692:	2301      	movs	r3, #1
 8000694:	e00f      	b.n	80006b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <SysTick_Config+0x40>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3b01      	subs	r3, #1
 800069c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800069e:	210f      	movs	r1, #15
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f7ff ff8e 	bl	80005c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <SysTick_Config+0x40>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <SysTick_Config+0x40>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	e000e010 	.word	0xe000e010

080006c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff47 	bl	8000560 <__NVIC_SetPriorityGrouping>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b086      	sub	sp, #24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	4603      	mov	r3, r0
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
 80006e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006ec:	f7ff ff5c 	bl	80005a8 <__NVIC_GetPriorityGrouping>
 80006f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	68b9      	ldr	r1, [r7, #8]
 80006f6:	6978      	ldr	r0, [r7, #20]
 80006f8:	f7ff ff8e 	bl	8000618 <NVIC_EncodePriority>
 80006fc:	4602      	mov	r2, r0
 80006fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff5d 	bl	80005c4 <__NVIC_SetPriority>
}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ffb0 	bl	8000680 <SysTick_Config>
 8000720:	4603      	mov	r3, r0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800073a:	e17f      	b.n	8000a3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	2101      	movs	r1, #1
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	fa01 f303 	lsl.w	r3, r1, r3
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b00      	cmp	r3, #0
 8000750:	f000 8171 	beq.w	8000a36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f003 0303 	and.w	r3, r3, #3
 800075c:	2b01      	cmp	r3, #1
 800075e:	d005      	beq.n	800076c <HAL_GPIO_Init+0x40>
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f003 0303 	and.w	r3, r3, #3
 8000768:	2b02      	cmp	r3, #2
 800076a:	d130      	bne.n	80007ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	2203      	movs	r2, #3
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	43db      	mvns	r3, r3
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	4013      	ands	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	68da      	ldr	r2, [r3, #12]
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	4313      	orrs	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007a2:	2201      	movs	r2, #1
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43db      	mvns	r3, r3
 80007ac:	693a      	ldr	r2, [r7, #16]
 80007ae:	4013      	ands	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	091b      	lsrs	r3, r3, #4
 80007b8:	f003 0201 	and.w	r2, r3, #1
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f003 0303 	and.w	r3, r3, #3
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d118      	bne.n	800080c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80007e0:	2201      	movs	r2, #1
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	43db      	mvns	r3, r3
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	4013      	ands	r3, r2
 80007ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	08db      	lsrs	r3, r3, #3
 80007f6:	f003 0201 	and.w	r2, r3, #1
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	4313      	orrs	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	693a      	ldr	r2, [r7, #16]
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	2b03      	cmp	r3, #3
 8000816:	d017      	beq.n	8000848 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	2203      	movs	r2, #3
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	4013      	ands	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	4313      	orrs	r3, r2
 8000840:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 0303 	and.w	r3, r3, #3
 8000850:	2b02      	cmp	r3, #2
 8000852:	d123      	bne.n	800089c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	08da      	lsrs	r2, r3, #3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3208      	adds	r2, #8
 800085c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000860:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	f003 0307 	and.w	r3, r3, #7
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	220f      	movs	r2, #15
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	691a      	ldr	r2, [r3, #16]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	4313      	orrs	r3, r2
 800088c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	08da      	lsrs	r2, r3, #3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3208      	adds	r2, #8
 8000896:	6939      	ldr	r1, [r7, #16]
 8000898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	2203      	movs	r2, #3
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4013      	ands	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f003 0203 	and.w	r2, r3, #3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008d8:	2b00      	cmp	r3, #0
 80008da:	f000 80ac 	beq.w	8000a36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	4b5f      	ldr	r3, [pc, #380]	; (8000a5c <HAL_GPIO_Init+0x330>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	4a5e      	ldr	r2, [pc, #376]	; (8000a5c <HAL_GPIO_Init+0x330>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ea:	4b5c      	ldr	r3, [pc, #368]	; (8000a5c <HAL_GPIO_Init+0x330>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008f6:	4a5a      	ldr	r2, [pc, #360]	; (8000a60 <HAL_GPIO_Init+0x334>)
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	3302      	adds	r3, #2
 80008fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000902:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	f003 0303 	and.w	r3, r3, #3
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	220f      	movs	r2, #15
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000920:	d025      	beq.n	800096e <HAL_GPIO_Init+0x242>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a4f      	ldr	r2, [pc, #316]	; (8000a64 <HAL_GPIO_Init+0x338>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d01f      	beq.n	800096a <HAL_GPIO_Init+0x23e>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a4e      	ldr	r2, [pc, #312]	; (8000a68 <HAL_GPIO_Init+0x33c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d019      	beq.n	8000966 <HAL_GPIO_Init+0x23a>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a4d      	ldr	r2, [pc, #308]	; (8000a6c <HAL_GPIO_Init+0x340>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d013      	beq.n	8000962 <HAL_GPIO_Init+0x236>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a4c      	ldr	r2, [pc, #304]	; (8000a70 <HAL_GPIO_Init+0x344>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d00d      	beq.n	800095e <HAL_GPIO_Init+0x232>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a4b      	ldr	r2, [pc, #300]	; (8000a74 <HAL_GPIO_Init+0x348>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d007      	beq.n	800095a <HAL_GPIO_Init+0x22e>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a4a      	ldr	r2, [pc, #296]	; (8000a78 <HAL_GPIO_Init+0x34c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_GPIO_Init+0x22a>
 8000952:	2306      	movs	r3, #6
 8000954:	e00c      	b.n	8000970 <HAL_GPIO_Init+0x244>
 8000956:	2307      	movs	r3, #7
 8000958:	e00a      	b.n	8000970 <HAL_GPIO_Init+0x244>
 800095a:	2305      	movs	r3, #5
 800095c:	e008      	b.n	8000970 <HAL_GPIO_Init+0x244>
 800095e:	2304      	movs	r3, #4
 8000960:	e006      	b.n	8000970 <HAL_GPIO_Init+0x244>
 8000962:	2303      	movs	r3, #3
 8000964:	e004      	b.n	8000970 <HAL_GPIO_Init+0x244>
 8000966:	2302      	movs	r3, #2
 8000968:	e002      	b.n	8000970 <HAL_GPIO_Init+0x244>
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <HAL_GPIO_Init+0x244>
 800096e:	2300      	movs	r3, #0
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	f002 0203 	and.w	r2, r2, #3
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	4093      	lsls	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000980:	4937      	ldr	r1, [pc, #220]	; (8000a60 <HAL_GPIO_Init+0x334>)
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	3302      	adds	r3, #2
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800098e:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <HAL_GPIO_Init+0x350>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009b2:	4a32      	ldr	r2, [pc, #200]	; (8000a7c <HAL_GPIO_Init+0x350>)
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009b8:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <HAL_GPIO_Init+0x350>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009dc:	4a27      	ldr	r2, [pc, #156]	; (8000a7c <HAL_GPIO_Init+0x350>)
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <HAL_GPIO_Init+0x350>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a06:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <HAL_GPIO_Init+0x350>)
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_GPIO_Init+0x350>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <HAL_GPIO_Init+0x350>)
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa22 f303 	lsr.w	r3, r2, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f47f ae78 	bne.w	800073c <HAL_GPIO_Init+0x10>
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	371c      	adds	r7, #28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010000 	.word	0x40010000
 8000a64:	48000400 	.word	0x48000400
 8000a68:	48000800 	.word	0x48000800
 8000a6c:	48000c00 	.word	0x48000c00
 8000a70:	48001000 	.word	0x48001000
 8000a74:	48001400 	.word	0x48001400
 8000a78:	48001800 	.word	0x48001800
 8000a7c:	40010400 	.word	0x40010400

08000a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a90:	787b      	ldrb	r3, [r7, #1]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a96:	887a      	ldrh	r2, [r7, #2]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a9c:	e002      	b.n	8000aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a9e:	887a      	ldrh	r2, [r7, #2]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ac2:	887a      	ldrh	r2, [r7, #2]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	041a      	lsls	r2, r3, #16
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	43d9      	mvns	r1, r3
 8000ace:	887b      	ldrh	r3, [r7, #2]
 8000ad0:	400b      	ands	r3, r1
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	619a      	str	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <HAL_PWREx_GetVoltageRange+0x18>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40007000 	.word	0x40007000

08000b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b0e:	d130      	bne.n	8000b72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b1c:	d038      	beq.n	8000b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b26:	4a1e      	ldr	r2, [pc, #120]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2232      	movs	r2, #50	; 0x32
 8000b34:	fb02 f303 	mul.w	r3, r2, r3
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	0c9b      	lsrs	r3, r3, #18
 8000b40:	3301      	adds	r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b44:	e002      	b.n	8000b4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b58:	d102      	bne.n	8000b60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1f2      	bne.n	8000b46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b6c:	d110      	bne.n	8000b90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e00f      	b.n	8000b92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7e:	d007      	beq.n	8000b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b88:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40007000 	.word	0x40007000
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	431bde83 	.word	0x431bde83

08000bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e3ca      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bbe:	4b97      	ldr	r3, [pc, #604]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bc8:	4b94      	ldr	r3, [pc, #592]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 80e4 	beq.w	8000da8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d007      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x4a>
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	2b0c      	cmp	r3, #12
 8000bea:	f040 808b 	bne.w	8000d04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	f040 8087 	bne.w	8000d04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bf6:	4b89      	ldr	r3, [pc, #548]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d005      	beq.n	8000c0e <HAL_RCC_OscConfig+0x62>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e3a2      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a1a      	ldr	r2, [r3, #32]
 8000c12:	4b82      	ldr	r3, [pc, #520]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d004      	beq.n	8000c28 <HAL_RCC_OscConfig+0x7c>
 8000c1e:	4b7f      	ldr	r3, [pc, #508]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c26:	e005      	b.n	8000c34 <HAL_RCC_OscConfig+0x88>
 8000c28:	4b7c      	ldr	r3, [pc, #496]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c2e:	091b      	lsrs	r3, r3, #4
 8000c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d223      	bcs.n	8000c80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fd1d 	bl	800167c <RCC_SetFlashLatencyFromMSIRange>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e383      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c4c:	4b73      	ldr	r3, [pc, #460]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a72      	ldr	r2, [pc, #456]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b70      	ldr	r3, [pc, #448]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	496d      	ldr	r1, [pc, #436]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c66:	4313      	orrs	r3, r2
 8000c68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c6a:	4b6c      	ldr	r3, [pc, #432]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	4968      	ldr	r1, [pc, #416]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	604b      	str	r3, [r1, #4]
 8000c7e:	e025      	b.n	8000ccc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c80:	4b66      	ldr	r3, [pc, #408]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a65      	ldr	r2, [pc, #404]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c86:	f043 0308 	orr.w	r3, r3, #8
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	4960      	ldr	r1, [pc, #384]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c9e:	4b5f      	ldr	r3, [pc, #380]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	495b      	ldr	r1, [pc, #364]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d109      	bne.n	8000ccc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fcdd 	bl	800167c <RCC_SetFlashLatencyFromMSIRange>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e343      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ccc:	f000 fc4a 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	4b52      	ldr	r3, [pc, #328]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	f003 030f 	and.w	r3, r3, #15
 8000cdc:	4950      	ldr	r1, [pc, #320]	; (8000e20 <HAL_RCC_OscConfig+0x274>)
 8000cde:	5ccb      	ldrb	r3, [r1, r3]
 8000ce0:	f003 031f 	and.w	r3, r3, #31
 8000ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce8:	4a4e      	ldr	r2, [pc, #312]	; (8000e24 <HAL_RCC_OscConfig+0x278>)
 8000cea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000cec:	4b4e      	ldr	r3, [pc, #312]	; (8000e28 <HAL_RCC_OscConfig+0x27c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fbb5 	bl	8000460 <HAL_InitTick>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d052      	beq.n	8000da6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	e327      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d032      	beq.n	8000d72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d0c:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a42      	ldr	r2, [pc, #264]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d18:	f7ff fbf2 	bl	8000500 <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d20:	f7ff fbee 	bl	8000500 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e310      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d32:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0f0      	beq.n	8000d20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a36      	ldr	r2, [pc, #216]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a1b      	ldr	r3, [r3, #32]
 8000d56:	4931      	ldr	r1, [pc, #196]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	492c      	ldr	r1, [pc, #176]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
 8000d70:	e01a      	b.n	8000da8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a29      	ldr	r2, [pc, #164]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fbbf 	bl	8000500 <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d86:	f7ff fbbb 	bl	8000500 <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e2dd      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1f0      	bne.n	8000d86 <HAL_RCC_OscConfig+0x1da>
 8000da4:	e000      	b.n	8000da8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000da6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d074      	beq.n	8000e9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	2b08      	cmp	r3, #8
 8000db8:	d005      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x21a>
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2b0c      	cmp	r3, #12
 8000dbe:	d10e      	bne.n	8000dde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d10b      	bne.n	8000dde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d064      	beq.n	8000e9c <HAL_RCC_OscConfig+0x2f0>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d160      	bne.n	8000e9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e2ba      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de6:	d106      	bne.n	8000df6 <HAL_RCC_OscConfig+0x24a>
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e026      	b.n	8000e44 <HAL_RCC_OscConfig+0x298>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dfe:	d115      	bne.n	8000e2c <HAL_RCC_OscConfig+0x280>
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a02      	ldr	r2, [pc, #8]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	e014      	b.n	8000e44 <HAL_RCC_OscConfig+0x298>
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	080017ac 	.word	0x080017ac
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000004 	.word	0x20000004
 8000e2c:	4ba0      	ldr	r3, [pc, #640]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a9f      	ldr	r2, [pc, #636]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b9d      	ldr	r3, [pc, #628]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a9c      	ldr	r2, [pc, #624]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fb58 	bl	8000500 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e54:	f7ff fb54 	bl	8000500 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b64      	cmp	r3, #100	; 0x64
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e276      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e66:	4b92      	ldr	r3, [pc, #584]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f0      	beq.n	8000e54 <HAL_RCC_OscConfig+0x2a8>
 8000e72:	e014      	b.n	8000e9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e74:	f7ff fb44 	bl	8000500 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fb40 	bl	8000500 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b64      	cmp	r3, #100	; 0x64
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e262      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e8e:	4b88      	ldr	r3, [pc, #544]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x2d0>
 8000e9a:	e000      	b.n	8000e9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d060      	beq.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d005      	beq.n	8000ebc <HAL_RCC_OscConfig+0x310>
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2b0c      	cmp	r3, #12
 8000eb4:	d119      	bne.n	8000eea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d116      	bne.n	8000eea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ebc:	4b7c      	ldr	r3, [pc, #496]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d005      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x328>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e23f      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed4:	4b76      	ldr	r3, [pc, #472]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	061b      	lsls	r3, r3, #24
 8000ee2:	4973      	ldr	r1, [pc, #460]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ee8:	e040      	b.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d023      	beq.n	8000f3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef2:	4b6f      	ldr	r3, [pc, #444]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a6e      	ldr	r2, [pc, #440]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000efe:	f7ff faff 	bl	8000500 <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f04:	e008      	b.n	8000f18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f06:	f7ff fafb 	bl	8000500 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e21d      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f18:	4b65      	ldr	r3, [pc, #404]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f0      	beq.n	8000f06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f24:	4b62      	ldr	r3, [pc, #392]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	061b      	lsls	r3, r3, #24
 8000f32:	495f      	ldr	r1, [pc, #380]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f34:	4313      	orrs	r3, r2
 8000f36:	604b      	str	r3, [r1, #4]
 8000f38:	e018      	b.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f3a:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a5c      	ldr	r2, [pc, #368]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f46:	f7ff fadb 	bl	8000500 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f4e:	f7ff fad7 	bl	8000500 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e1f9      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f60:	4b53      	ldr	r3, [pc, #332]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f0      	bne.n	8000f4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d03c      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d01c      	beq.n	8000fba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f80:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f86:	4a4a      	ldr	r2, [pc, #296]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f90:	f7ff fab6 	bl	8000500 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f98:	f7ff fab2 	bl	8000500 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e1d4      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0ef      	beq.n	8000f98 <HAL_RCC_OscConfig+0x3ec>
 8000fb8:	e01b      	b.n	8000ff2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fc0:	4a3b      	ldr	r2, [pc, #236]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000fc2:	f023 0301 	bic.w	r3, r3, #1
 8000fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fca:	f7ff fa99 	bl	8000500 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fa95 	bl	8000500 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e1b7      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fe4:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1ef      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80a6 	beq.w	800114c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10d      	bne.n	800102c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101a:	6593      	str	r3, [r2, #88]	; 0x58
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001028:	2301      	movs	r3, #1
 800102a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_RCC_OscConfig+0x508>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001034:	2b00      	cmp	r3, #0
 8001036:	d118      	bne.n	800106a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_RCC_OscConfig+0x508>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <HAL_RCC_OscConfig+0x508>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001044:	f7ff fa5c 	bl	8000500 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800104c:	f7ff fa58 	bl	8000500 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e17a      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_RCC_OscConfig+0x508>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d108      	bne.n	8001084 <HAL_RCC_OscConfig+0x4d8>
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8001074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001082:	e029      	b.n	80010d8 <HAL_RCC_OscConfig+0x52c>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d115      	bne.n	80010b8 <HAL_RCC_OscConfig+0x50c>
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 800108e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 800109e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a2:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010ac:	e014      	b.n	80010d8 <HAL_RCC_OscConfig+0x52c>
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40007000 	.word	0x40007000
 80010b8:	4b9c      	ldr	r3, [pc, #624]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80010ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010be:	4a9b      	ldr	r2, [pc, #620]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010c8:	4b98      	ldr	r3, [pc, #608]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80010ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ce:	4a97      	ldr	r2, [pc, #604]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80010d0:	f023 0304 	bic.w	r3, r3, #4
 80010d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d016      	beq.n	800110e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e0:	f7ff fa0e 	bl	8000500 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010e6:	e00a      	b.n	80010fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e8:	f7ff fa0a 	bl	8000500 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e12a      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010fe:	4b8b      	ldr	r3, [pc, #556]	; (800132c <HAL_RCC_OscConfig+0x780>)
 8001100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0ed      	beq.n	80010e8 <HAL_RCC_OscConfig+0x53c>
 800110c:	e015      	b.n	800113a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110e:	f7ff f9f7 	bl	8000500 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001114:	e00a      	b.n	800112c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001116:	f7ff f9f3 	bl	8000500 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f241 3288 	movw	r2, #5000	; 0x1388
 8001124:	4293      	cmp	r3, r2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e113      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800112c:	4b7f      	ldr	r3, [pc, #508]	; (800132c <HAL_RCC_OscConfig+0x780>)
 800112e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1ed      	bne.n	8001116 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800113a:	7ffb      	ldrb	r3, [r7, #31]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d105      	bne.n	800114c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001140:	4b7a      	ldr	r3, [pc, #488]	; (800132c <HAL_RCC_OscConfig+0x780>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	4a79      	ldr	r2, [pc, #484]	; (800132c <HAL_RCC_OscConfig+0x780>)
 8001146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800114a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80fe 	beq.w	8001352 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115a:	2b02      	cmp	r3, #2
 800115c:	f040 80d0 	bne.w	8001300 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001160:	4b72      	ldr	r3, [pc, #456]	; (800132c <HAL_RCC_OscConfig+0x780>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f003 0203 	and.w	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	429a      	cmp	r2, r3
 8001172:	d130      	bne.n	80011d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	3b01      	subs	r3, #1
 8001180:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001182:	429a      	cmp	r2, r3
 8001184:	d127      	bne.n	80011d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001190:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001192:	429a      	cmp	r2, r3
 8001194:	d11f      	bne.n	80011d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80011a0:	2a07      	cmp	r2, #7
 80011a2:	bf14      	ite	ne
 80011a4:	2201      	movne	r2, #1
 80011a6:	2200      	moveq	r2, #0
 80011a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d113      	bne.n	80011d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	3b01      	subs	r3, #1
 80011bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80011be:	429a      	cmp	r2, r3
 80011c0:	d109      	bne.n	80011d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	085b      	lsrs	r3, r3, #1
 80011ce:	3b01      	subs	r3, #1
 80011d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d06e      	beq.n	80012b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	d069      	beq.n	80012b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80011dc:	4b53      	ldr	r3, [pc, #332]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d105      	bne.n	80011f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80011e8:	4b50      	ldr	r3, [pc, #320]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e0ad      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80011f8:	4b4c      	ldr	r3, [pc, #304]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80011fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001202:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001204:	f7ff f97c 	bl	8000500 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120c:	f7ff f978 	bl	8000500 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e09a      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800121e:	4b43      	ldr	r3, [pc, #268]	; (800132c <HAL_RCC_OscConfig+0x780>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800122a:	4b40      	ldr	r3, [pc, #256]	; (800132c <HAL_RCC_OscConfig+0x780>)
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	4b40      	ldr	r3, [pc, #256]	; (8001330 <HAL_RCC_OscConfig+0x784>)
 8001230:	4013      	ands	r3, r2
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800123a:	3a01      	subs	r2, #1
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	4311      	orrs	r1, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001244:	0212      	lsls	r2, r2, #8
 8001246:	4311      	orrs	r1, r2
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800124c:	0852      	lsrs	r2, r2, #1
 800124e:	3a01      	subs	r2, #1
 8001250:	0552      	lsls	r2, r2, #21
 8001252:	4311      	orrs	r1, r2
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001258:	0852      	lsrs	r2, r2, #1
 800125a:	3a01      	subs	r2, #1
 800125c:	0652      	lsls	r2, r2, #25
 800125e:	4311      	orrs	r1, r2
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001264:	0912      	lsrs	r2, r2, #4
 8001266:	0452      	lsls	r2, r2, #17
 8001268:	430a      	orrs	r2, r1
 800126a:	4930      	ldr	r1, [pc, #192]	; (800132c <HAL_RCC_OscConfig+0x780>)
 800126c:	4313      	orrs	r3, r2
 800126e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001270:	4b2e      	ldr	r3, [pc, #184]	; (800132c <HAL_RCC_OscConfig+0x780>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a2d      	ldr	r2, [pc, #180]	; (800132c <HAL_RCC_OscConfig+0x780>)
 8001276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800127a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800127c:	4b2b      	ldr	r3, [pc, #172]	; (800132c <HAL_RCC_OscConfig+0x780>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4a2a      	ldr	r2, [pc, #168]	; (800132c <HAL_RCC_OscConfig+0x780>)
 8001282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001286:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001288:	f7ff f93a 	bl	8000500 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001290:	f7ff f936 	bl	8000500 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e058      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012ae:	e050      	b.n	8001352 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e04f      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d148      	bne.n	8001352 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80012c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4a16      	ldr	r2, [pc, #88]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80012d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012d8:	f7ff f912 	bl	8000500 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e0:	f7ff f90e 	bl	8000500 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e030      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_RCC_OscConfig+0x780>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x734>
 80012fe:	e028      	b.n	8001352 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2b0c      	cmp	r3, #12
 8001304:	d023      	beq.n	800134e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_RCC_OscConfig+0x780>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_RCC_OscConfig+0x780>)
 800130c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001312:	f7ff f8f5 	bl	8000500 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001318:	e00c      	b.n	8001334 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131a:	f7ff f8f1 	bl	8000500 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d905      	bls.n	8001334 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e013      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
 800132c:	40021000 	.word	0x40021000
 8001330:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_RCC_OscConfig+0x7b0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ec      	bne.n	800131a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_RCC_OscConfig+0x7b0>)
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	4905      	ldr	r1, [pc, #20]	; (800135c <HAL_RCC_OscConfig+0x7b0>)
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_RCC_OscConfig+0x7b4>)
 8001348:	4013      	ands	r3, r2
 800134a:	60cb      	str	r3, [r1, #12]
 800134c:	e001      	b.n	8001352 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000
 8001360:	feeefffc 	.word	0xfeeefffc

08001364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e0e7      	b.n	8001548 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001378:	4b75      	ldr	r3, [pc, #468]	; (8001550 <HAL_RCC_ClockConfig+0x1ec>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d910      	bls.n	80013a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001386:	4b72      	ldr	r3, [pc, #456]	; (8001550 <HAL_RCC_ClockConfig+0x1ec>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 0207 	bic.w	r2, r3, #7
 800138e:	4970      	ldr	r1, [pc, #448]	; (8001550 <HAL_RCC_ClockConfig+0x1ec>)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001396:	4b6e      	ldr	r3, [pc, #440]	; (8001550 <HAL_RCC_ClockConfig+0x1ec>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0cf      	b.n	8001548 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d010      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d908      	bls.n	80013d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c4:	4b63      	ldr	r3, [pc, #396]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4960      	ldr	r1, [pc, #384]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d04c      	beq.n	800147c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ea:	4b5a      	ldr	r3, [pc, #360]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d121      	bne.n	800143a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0a6      	b.n	8001548 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d107      	bne.n	8001412 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001402:	4b54      	ldr	r3, [pc, #336]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d115      	bne.n	800143a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e09a      	b.n	8001548 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800141a:	4b4e      	ldr	r3, [pc, #312]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d109      	bne.n	800143a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e08e      	b.n	8001548 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e086      	b.n	8001548 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800143a:	4b46      	ldr	r3, [pc, #280]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f023 0203 	bic.w	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4943      	ldr	r1, [pc, #268]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 8001448:	4313      	orrs	r3, r2
 800144a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800144c:	f7ff f858 	bl	8000500 <HAL_GetTick>
 8001450:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001452:	e00a      	b.n	800146a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001454:	f7ff f854 	bl	8000500 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e06e      	b.n	8001548 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 020c 	and.w	r2, r3, #12
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	429a      	cmp	r2, r3
 800147a:	d1eb      	bne.n	8001454 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d010      	beq.n	80014aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	4b31      	ldr	r3, [pc, #196]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001494:	429a      	cmp	r2, r3
 8001496:	d208      	bcs.n	80014aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001498:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	492b      	ldr	r1, [pc, #172]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014aa:	4b29      	ldr	r3, [pc, #164]	; (8001550 <HAL_RCC_ClockConfig+0x1ec>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d210      	bcs.n	80014da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <HAL_RCC_ClockConfig+0x1ec>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 0207 	bic.w	r2, r3, #7
 80014c0:	4923      	ldr	r1, [pc, #140]	; (8001550 <HAL_RCC_ClockConfig+0x1ec>)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_RCC_ClockConfig+0x1ec>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d001      	beq.n	80014da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e036      	b.n	8001548 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	4918      	ldr	r1, [pc, #96]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d009      	beq.n	8001518 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4910      	ldr	r1, [pc, #64]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 8001514:	4313      	orrs	r3, r2
 8001516:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001518:	f000 f824 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 800151c:	4602      	mov	r2, r0
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_RCC_ClockConfig+0x1f0>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	490b      	ldr	r1, [pc, #44]	; (8001558 <HAL_RCC_ClockConfig+0x1f4>)
 800152a:	5ccb      	ldrb	r3, [r1, r3]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
 8001534:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1f8>)
 8001536:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_ClockConfig+0x1fc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ff8f 	bl	8000460 <HAL_InitTick>
 8001542:	4603      	mov	r3, r0
 8001544:	72fb      	strb	r3, [r7, #11]

  return status;
 8001546:	7afb      	ldrb	r3, [r7, #11]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40022000 	.word	0x40022000
 8001554:	40021000 	.word	0x40021000
 8001558:	080017ac 	.word	0x080017ac
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001572:	4b3e      	ldr	r3, [pc, #248]	; (800166c <HAL_RCC_GetSysClockFreq+0x108>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800157c:	4b3b      	ldr	r3, [pc, #236]	; (800166c <HAL_RCC_GetSysClockFreq+0x108>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0x34>
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2b0c      	cmp	r3, #12
 8001590:	d121      	bne.n	80015d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d11e      	bne.n	80015d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_RCC_GetSysClockFreq+0x108>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_RCC_GetSysClockFreq+0x108>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	e005      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_RCC_GetSysClockFreq+0x108>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80015c0:	4a2b      	ldr	r2, [pc, #172]	; (8001670 <HAL_RCC_GetSysClockFreq+0x10c>)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10d      	bne.n	80015ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d4:	e00a      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d102      	bne.n	80015e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <HAL_RCC_GetSysClockFreq+0x110>)
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	e004      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_RCC_GetSysClockFreq+0x114>)
 80015ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d134      	bne.n	800165c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <HAL_RCC_GetSysClockFreq+0x108>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d003      	beq.n	800160a <HAL_RCC_GetSysClockFreq+0xa6>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d003      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0xac>
 8001608:	e005      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_RCC_GetSysClockFreq+0x110>)
 800160c:	617b      	str	r3, [r7, #20]
      break;
 800160e:	e005      	b.n	800161c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_RCC_GetSysClockFreq+0x114>)
 8001612:	617b      	str	r3, [r7, #20]
      break;
 8001614:	e002      	b.n	800161c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	617b      	str	r3, [r7, #20]
      break;
 800161a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_RCC_GetSysClockFreq+0x108>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	3301      	adds	r3, #1
 8001628:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_RCC_GetSysClockFreq+0x108>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	fb03 f202 	mul.w	r2, r3, r2
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_RCC_GetSysClockFreq+0x108>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	0e5b      	lsrs	r3, r3, #25
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	3301      	adds	r3, #1
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800165c:	69bb      	ldr	r3, [r7, #24]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	080017bc 	.word	0x080017bc
 8001674:	00f42400 	.word	0x00f42400
 8001678:	007a1200 	.word	0x007a1200

0800167c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001694:	f7ff fa26 	bl	8000ae4 <HAL_PWREx_GetVoltageRange>
 8001698:	6178      	str	r0, [r7, #20]
 800169a:	e014      	b.n	80016c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	4a24      	ldr	r2, [pc, #144]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a6:	6593      	str	r3, [r2, #88]	; 0x58
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80016b4:	f7ff fa16 	bl	8000ae4 <HAL_PWREx_GetVoltageRange>
 80016b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016cc:	d10b      	bne.n	80016e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b80      	cmp	r3, #128	; 0x80
 80016d2:	d919      	bls.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2ba0      	cmp	r3, #160	; 0xa0
 80016d8:	d902      	bls.n	80016e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016da:	2302      	movs	r3, #2
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	e013      	b.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016e0:	2301      	movs	r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	e010      	b.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b80      	cmp	r3, #128	; 0x80
 80016ea:	d902      	bls.n	80016f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80016ec:	2303      	movs	r3, #3
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	e00a      	b.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b80      	cmp	r3, #128	; 0x80
 80016f6:	d102      	bne.n	80016fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016f8:	2302      	movs	r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	e004      	b.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b70      	cmp	r3, #112	; 0x70
 8001702:	d101      	bne.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 0207 	bic.w	r2, r3, #7
 8001710:	4909      	ldr	r1, [pc, #36]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	40022000 	.word	0x40022000

0800173c <__libc_init_array>:
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	4d0d      	ldr	r5, [pc, #52]	; (8001774 <__libc_init_array+0x38>)
 8001740:	4c0d      	ldr	r4, [pc, #52]	; (8001778 <__libc_init_array+0x3c>)
 8001742:	1b64      	subs	r4, r4, r5
 8001744:	10a4      	asrs	r4, r4, #2
 8001746:	2600      	movs	r6, #0
 8001748:	42a6      	cmp	r6, r4
 800174a:	d109      	bne.n	8001760 <__libc_init_array+0x24>
 800174c:	4d0b      	ldr	r5, [pc, #44]	; (800177c <__libc_init_array+0x40>)
 800174e:	4c0c      	ldr	r4, [pc, #48]	; (8001780 <__libc_init_array+0x44>)
 8001750:	f000 f820 	bl	8001794 <_init>
 8001754:	1b64      	subs	r4, r4, r5
 8001756:	10a4      	asrs	r4, r4, #2
 8001758:	2600      	movs	r6, #0
 800175a:	42a6      	cmp	r6, r4
 800175c:	d105      	bne.n	800176a <__libc_init_array+0x2e>
 800175e:	bd70      	pop	{r4, r5, r6, pc}
 8001760:	f855 3b04 	ldr.w	r3, [r5], #4
 8001764:	4798      	blx	r3
 8001766:	3601      	adds	r6, #1
 8001768:	e7ee      	b.n	8001748 <__libc_init_array+0xc>
 800176a:	f855 3b04 	ldr.w	r3, [r5], #4
 800176e:	4798      	blx	r3
 8001770:	3601      	adds	r6, #1
 8001772:	e7f2      	b.n	800175a <__libc_init_array+0x1e>
 8001774:	080017ec 	.word	0x080017ec
 8001778:	080017ec 	.word	0x080017ec
 800177c:	080017ec 	.word	0x080017ec
 8001780:	080017f0 	.word	0x080017f0

08001784 <memset>:
 8001784:	4402      	add	r2, r0
 8001786:	4603      	mov	r3, r0
 8001788:	4293      	cmp	r3, r2
 800178a:	d100      	bne.n	800178e <memset+0xa>
 800178c:	4770      	bx	lr
 800178e:	f803 1b01 	strb.w	r1, [r3], #1
 8001792:	e7f9      	b.n	8001788 <memset+0x4>

08001794 <_init>:
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001796:	bf00      	nop
 8001798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179a:	bc08      	pop	{r3}
 800179c:	469e      	mov	lr, r3
 800179e:	4770      	bx	lr

080017a0 <_fini>:
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	bf00      	nop
 80017a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017a6:	bc08      	pop	{r3}
 80017a8:	469e      	mov	lr, r3
 80017aa:	4770      	bx	lr
